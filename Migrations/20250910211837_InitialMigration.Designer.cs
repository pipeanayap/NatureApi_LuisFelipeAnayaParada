// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NatureApi;

#nullable disable

namespace NatureApi.Migrations
{
    [DbContext(typeof(StoreDbContext))]
    [Migration("20250910211837_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NatureApi.Entities.Amenity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Amenity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "WiFi Gratuito"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Estacionamiento"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Acceso para Discapacitados"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Cafetería"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Tienda de Recuerdos"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Audioguía"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Baños Públicos"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Área de Picnic"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Tours Guiados"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Taquillas"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Área Infantil"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Jardines"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Ascensor"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Seguridad 24h"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Información Turística"
                        });
                });

            modelBuilder.Entity("NatureApi.Entities.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Photo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PlaceId = 1,
                            Url = "https://images.unsplash.com/photo-1578662996442-48f60103fc96"
                        },
                        new
                        {
                            Id = 2,
                            PlaceId = 1,
                            Url = "https://images.unsplash.com/photo-1571678264022-e97ed89a33b4"
                        },
                        new
                        {
                            Id = 3,
                            PlaceId = 1,
                            Url = "https://images.unsplash.com/photo-1594736797933-d0601ba19be5"
                        },
                        new
                        {
                            Id = 4,
                            PlaceId = 2,
                            Url = "https://images.unsplash.com/photo-1583422409516-2895a77efded"
                        },
                        new
                        {
                            Id = 5,
                            PlaceId = 2,
                            Url = "https://images.unsplash.com/photo-1539650116574-75c0c6d00f2f"
                        },
                        new
                        {
                            Id = 6,
                            PlaceId = 2,
                            Url = "https://images.unsplash.com/photo-1511527844068-006b95d162c2"
                        },
                        new
                        {
                            Id = 7,
                            PlaceId = 3,
                            Url = "https://images.unsplash.com/photo-1558642452-9d2a7deb7f62"
                        },
                        new
                        {
                            Id = 8,
                            PlaceId = 3,
                            Url = "https://images.unsplash.com/photo-1605282003441-4828c8b69cd3"
                        },
                        new
                        {
                            Id = 9,
                            PlaceId = 3,
                            Url = "https://images.unsplash.com/photo-1571663852432-bb0f4e7db0b2"
                        },
                        new
                        {
                            Id = 10,
                            PlaceId = 4,
                            Url = "https://images.unsplash.com/photo-1584464491033-06628f3a6b7b"
                        },
                        new
                        {
                            Id = 11,
                            PlaceId = 4,
                            Url = "https://images.unsplash.com/photo-1590075865b93-5b81e33c1321"
                        },
                        new
                        {
                            Id = 12,
                            PlaceId = 4,
                            Url = "https://images.unsplash.com/photo-1557804506-669a67965ba0"
                        },
                        new
                        {
                            Id = 13,
                            PlaceId = 5,
                            Url = "https://images.unsplash.com/photo-1571663818459-0bcc3c55a49b"
                        },
                        new
                        {
                            Id = 14,
                            PlaceId = 5,
                            Url = "https://images.unsplash.com/photo-1633888080670-7c5ad7e6b28d"
                        },
                        new
                        {
                            Id = 15,
                            PlaceId = 5,
                            Url = "https://images.unsplash.com/photo-1589900670714-25370142cd17"
                        },
                        new
                        {
                            Id = 16,
                            PlaceId = 6,
                            Url = "https://images.unsplash.com/photo-1546600799-4d0a5d5a158a"
                        },
                        new
                        {
                            Id = 17,
                            PlaceId = 6,
                            Url = "https://images.unsplash.com/photo-1571663870103-2dd96e4b9c63"
                        },
                        new
                        {
                            Id = 18,
                            PlaceId = 6,
                            Url = "https://images.unsplash.com/photo-1506905925346-21bda4d32df4"
                        });
                });

            modelBuilder.Entity("NatureApi.Entities.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Accessible")
                        .HasColumnType("bit");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ElevationMeters")
                        .HasColumnType("int");

                    b.Property<double>("EntryFee")
                        .HasColumnType("float");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpeningHours")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Place");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Accessible = true,
                            Category = "Museo",
                            CreatedAt = new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Una de las pinacotecas más importantes del mundo, alberga obras maestras de Velázquez, Goya y El Greco",
                            ElevationMeters = 655,
                            EntryFee = 15.0,
                            Latitude = 40.413800000000002,
                            Longitude = -3.6920999999999999,
                            Name = "Museo del Prado",
                            OpeningHours = "Lunes a sábado 10:00-20:00, Domingos 10:00-19:00"
                        },
                        new
                        {
                            Id = 2,
                            Accessible = true,
                            Category = "Arquitectura",
                            CreatedAt = new DateTime(2023, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Basílica diseñada por Antoni Gaudí, obra maestra del modernismo catalán aún en construcción",
                            ElevationMeters = 152,
                            EntryFee = 26.0,
                            Latitude = 41.403599999999997,
                            Longitude = 2.1743999999999999,
                            Name = "La Sagrada Familia",
                            OpeningHours = "Abril-septiembre 9:00-20:00, Octubre-marzo 9:00-18:00"
                        },
                        new
                        {
                            Id = 3,
                            Accessible = false,
                            Category = "Patrimonio Histórico",
                            CreatedAt = new DateTime(2023, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Complejo palaciego y fortaleza nazarí que refleja el arte andalusí en su máximo esplendor",
                            ElevationMeters = 738,
                            EntryFee = 19.09,
                            Latitude = 37.177300000000002,
                            Longitude = -3.5985999999999998,
                            Name = "Alhambra",
                            OpeningHours = "Octubre-marzo 8:30-18:00, Abril-septiembre 8:30-20:00"
                        },
                        new
                        {
                            Id = 4,
                            Accessible = true,
                            Category = "Parque",
                            CreatedAt = new DateTime(2023, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Histórico parque público de Madrid, perfecto para pasear y relajarse en el corazón de la ciudad",
                            ElevationMeters = 650,
                            EntryFee = 0.0,
                            Latitude = 40.415300000000002,
                            Longitude = -3.6844000000000001,
                            Name = "Parque del Retiro",
                            OpeningHours = "Octubre-marzo 6:00-22:00, Abril-septiembre 6:00-24:00"
                        },
                        new
                        {
                            Id = 5,
                            Accessible = true,
                            Category = "Arquitectura Religiosa",
                            CreatedAt = new DateTime(2023, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "La catedral gótica más grande del mundo, alberga la tumba de Cristóbal Colón",
                            ElevationMeters = 11,
                            EntryFee = 12.0,
                            Latitude = 37.385899999999999,
                            Longitude = -5.9932999999999996,
                            Name = "Catedral de Sevilla",
                            OpeningHours = "Lunes a sábado 11:00-17:00, Domingos 14:30-18:00"
                        },
                        new
                        {
                            Id = 6,
                            Accessible = true,
                            Category = "Plaza Histórica",
                            CreatedAt = new DateTime(2023, 1, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Plaza barroca considerada una de las más bellas de España, centro neurálgico de Salamanca",
                            ElevationMeters = 802,
                            EntryFee = 0.0,
                            Latitude = 40.970100000000002,
                            Longitude = -5.6635,
                            Name = "Plaza Mayor",
                            OpeningHours = "24 horas"
                        });
                });

            modelBuilder.Entity("NatureApi.Entities.PlaceAmenity", b =>
                {
                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<int>("AmenityId")
                        .HasColumnType("int");

                    b.HasKey("PlaceId", "AmenityId");

                    b.HasIndex("AmenityId");

                    b.ToTable("PlaceAmenity");
                });

            modelBuilder.Entity("NatureApi.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("NatureApi.Entities.Trail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DistanceKm")
                        .HasColumnType("float");

                    b.Property<int>("EstimatedTimeMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("IsLoop")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Trail");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Difficulty = "Moderada",
                            DistanceKm = 2.5,
                            EstimatedTimeMinutes = 180,
                            IsLoop = false,
                            Name = "Ruta de los Palacios Nazaríes",
                            Path = "Entrada → Alcazaba → Palacios Nazaríes → Generalife",
                            PlaceId = 3
                        },
                        new
                        {
                            Id = 2,
                            Difficulty = "Fácil",
                            DistanceKm = 3.2000000000000002,
                            EstimatedTimeMinutes = 90,
                            IsLoop = true,
                            Name = "Sendero del Estanque",
                            Path = "Puerta de Alcalá → Estanque → Palacio de Cristal → Rosaleda",
                            PlaceId = 4
                        },
                        new
                        {
                            Id = 3,
                            Difficulty = "Fácil",
                            DistanceKm = 1.8,
                            EstimatedTimeMinutes = 120,
                            IsLoop = false,
                            Name = "Ruta de las Obras Maestras",
                            Path = "Velázquez → Goya → El Greco → Rubens",
                            PlaceId = 1
                        },
                        new
                        {
                            Id = 4,
                            Difficulty = "Moderada",
                            DistanceKm = 0.80000000000000004,
                            EstimatedTimeMinutes = 75,
                            IsLoop = false,
                            Name = "Tour de las Torres",
                            Path = "Entrada → Nave → Torres → Museo",
                            PlaceId = 2
                        },
                        new
                        {
                            Id = 5,
                            Difficulty = "Moderada",
                            DistanceKm = 1.2,
                            EstimatedTimeMinutes = 60,
                            IsLoop = false,
                            Name = "Ruta de la Giralda",
                            Path = "Catedral → Capilla Mayor → Giralda → Patio de los Naranjos",
                            PlaceId = 5
                        },
                        new
                        {
                            Id = 6,
                            Difficulty = "Fácil",
                            DistanceKm = 2.7999999999999998,
                            EstimatedTimeMinutes = 45,
                            IsLoop = true,
                            Name = "Recorrido Histórico",
                            Path = "Plaza Mayor → Casa de las Conchas → Universidad → Catedral Vieja",
                            PlaceId = 6
                        });
                });

            modelBuilder.Entity("NatureApi.Entities.Photo", b =>
                {
                    b.HasOne("NatureApi.Entities.Place", "Place")
                        .WithMany("Photos")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("NatureApi.Entities.PlaceAmenity", b =>
                {
                    b.HasOne("NatureApi.Entities.Amenity", "Amenity")
                        .WithMany("PlaceAmenities")
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NatureApi.Entities.Place", "Place")
                        .WithMany("PlaceAmenities")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Amenity");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("NatureApi.Entities.Review", b =>
                {
                    b.HasOne("NatureApi.Entities.Place", "Place")
                        .WithMany("Reviews")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("NatureApi.Entities.Trail", b =>
                {
                    b.HasOne("NatureApi.Entities.Place", "Place")
                        .WithMany("Trails")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("NatureApi.Entities.Amenity", b =>
                {
                    b.Navigation("PlaceAmenities");
                });

            modelBuilder.Entity("NatureApi.Entities.Place", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("PlaceAmenities");

                    b.Navigation("Reviews");

                    b.Navigation("Trails");
                });
#pragma warning restore 612, 618
        }
    }
}
